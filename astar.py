import math

TAILLE_COL = 43
TAILLE_LIGNE = 37

map = [
			[20, 20, 20, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 70, 20, 20, 20, 20, 20, 20, 20, 20, 70, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 70, 20, 70, 70, 70, 70, 70, 70, 20, 70, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 5, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 70, 20, 70, 20, 20, 20, 20, 70, 20, 70, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 5, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 70, 20, 70, 20, 70, 70, 20, 70, 20, 70, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 5, -1, -1, -1, 20, 20, 70, 70, 70, 70, 20, 20, 20, 20],
			
			[20, 20, 20, 70, 20, 70, 20, 70, 20, 20, 70, 20, 70, 20, -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, 5, 5, 5, 5, -1, -1, -1, -1, 20, 20, 70, 70, 20, 20, 70, 70, 70],
			[20, 70, 20, 70, 20, 70, 20, 70, 70, 70, 70, 20, 70, 20, -1, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 20, 20, 70, 70, 70, 70, 70, 70, 20],
			[20, 70, 20, 70, 20, 70, 20, 20, 20, 20, 20, 20, 70, 20, 20, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 70, 70, 70, 20, 20],
			[70, 70, 20, 70, 20, 70, 70, 70, 70, 70, 70, 70, 70, 20, 20, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 70, 70, 70, 70, 20],
			[70, 20, 20, 20, 20, 70, 20, 70, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			
			[70, 20, 70, 70, 70, 70, 20, 70, 70, 70, 20, 70, 70, 70, 20, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 70, 20, 20, 20, 20],
			[20, 20, 20, 20, 20, 70, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 20, 20, 20, 20, 20, -1, -1, 70, 70, 70, 70, 70, 70, 70, 20],
			[20, 20, 20, 20, 20, 70, 70, 70, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 5, 5, -1, 5, -1, 5, 5, -1, -1, -1, -1, 20, 20, 20, 20, -1, -1, -1, -1, 70, 70, 70, 70, 70, 20],
			[70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 5, 70, 70, 20, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, -1, -1, -1, 70, 70, 70, 70, 20, 20],
			[70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 5, 70, 70, 20, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 70, 70, 70, -1, 70, 70, 70, 70, 20, 20, 20],
			
			[70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 5, 70, 70, 70, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 20, 20, 70, 70, 70, 70, -1, -1, 70, 70, 70, 70, 20, 20],
			[20, 20, 20, 20, 20, 70, 70, 70, 70, 70, 5, 70, 70, 70, 70, -1, -1, -1, -1, 20, 20, 5, 20, 20, -1, -1, -1, -1, 20, 20, 20, 20, 70, 70, -1, -1, -1, -1, 70, 70, 70, 70, 70],
			[20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 5, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 20, 70, 70, 70, 70],
			[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 5, 5, 5, 20, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 20, 20, 20, 20, 20, 20],
			[20, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 20, 20, 5, 5, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			
			[70, 70, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			[70, 70, 70, 70, 70, 20, 20, 20, 20, 20, 20, 70, 70, 70, 70, 70, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 70, 70, 20, -1, -1, -1, 20, -1, -1, 20],
			[-1, 70, 70, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 70, 5, 70, 70, 20, 20, -1, -1, -1, -1, -1, 20],
			[-1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 5, 70, 70, 70, 20, 20, -1, -1, -1, 20, 20],
			[20, -1, -1, -1, -1, -1, -1, 20, 20, 5, 5, 5, 70, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 20, 70, 70, 70, 70, 70, 5, 5, 70, 70, 70, 20, 20, -1, -1, 20, 20],
			
			[20, 20, 20, 20, -1, -1, -1, -1, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 5, 5, 70, 70, 70, 70, 20, 20, 20, 20],
			[20, 20, 20, 20, 20, 20, -1, -1, -1, 5, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 70, 70, 70, 70, 70, 70, 20, 20, 5, 20, 20, 70, 70, 20, 20, 20, 20],
			[20, 20, 20, 20, 20, 20, 20, 20, -1, 5, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 5, 5, 70, 70, 70, 70, 70, 70, 70, 70, 20, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 20, 20, 20, 20, 20, 20, 5, 20, -1, -1, -1, 20, 20, 20, 20, 20, 5, 5, 5, 5, 70, 70, 70, 70, 70, 70, 70, 20, 20, 70, 70, 5, 5, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 20, 20, -1, -1, -1, -1, 20, 20, 20, 20, 5, 5, 5, 5, 5, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 5, 5, 5, 5, 5, 20, 20, 20],
			
			[20, 20, 20, 70, 70, 5, 5, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 20, 20, 20, 20, 5, 5, 5, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 20, 20, 20, 5, 5, 20, 20],
			[20, 70, 70, 70, 70, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, 20, 20, 20, 20, 70, 70, 70, 70, 70, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, 20, 20, 5, 5, 5],
			[20, 70, 70, 70, 70, 5, 20, 20, 20, 70, 70, 70, 20, 20, 20, 20, 20, -1, -1, -1, 20, 20, 20, 20, 70, 70, 70, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20],
			[70, 70, 70, 70, 70, 5, 20, 20, 70, 70, 70, 70, 70, 70, 20, 20, 20, 20, -1, -1, 20, 20, 20, 20, 70, 70, 70, 70, 20, 20, -1, -1, -1, 20, 20, 20, -1, -1, -1, 20, 20, 20, 20],
			[70, 70, 70, 20, 5, 5, 20, 20, 20, 70, 70, 70, 70, 70, 70, 70, 20, 20, -1, -1, -1, 20, 20, 20, 20, 70, 70, 70, 70, 20, 20, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			
			[20, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 20, 20, -1, -1, -1, -1, 20, 20, 20, 70, 70, 70, 70, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
			[20, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 70, 70, 70, 70, 20, 20, 20, 20, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
	]

def Hors_Limite(case):
    x,y = case
    return x<0 or x>=TAILLE_COL or y<0 or y>=TAILLE_LIGNE
        

def Mur_Eau(case):
    x,y = case
    return map[y][x]==-1
        

def Pas_Obstacle(case):
    return not (Hors_Limite(case) or Mur_Eau(case))
        

def Distance_Heuristique(case_debut,case_fin):
    dist=abs(case_fin[0]-case_debut[0])+abs(case_debut[1]-case_fin[1])
    return dist

def Voisins_Proches(case):
    x, y = case
    voisins = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]
    return filter(Pas_Obstacle,voisins)

def Distance_Voisin(case,voisin):
    return (map[case[1]][case[0]]+map[voisin[1]][voisin[0]])/2


def Astar(depart,arrivee):
    CasesEvaluees = []    	   		# la liste des cases évalué.
    CasesEncoursEval = [depart]     # la liste des cases qu’on est en train d’évaluer, au début ça ne contient que le départ
    CasesPrecedentes = {}        		# la dernière case qu’on a visité
    d_score = {}   					# cout estimé depuis le début.
    d_score[depart] = 0    
    f_score = {}          			#cout estimé pour arriver à la fin
    
    f_score[depart] = Distance_Heuristique(depart, arrivee)

    while CasesEncoursEval:
        case_Actuelle = min((f_score[noeud], noeud) 
		for noeud in CasesEncoursEval)[1]
        if case_Actuelle == arrivee:
            return Reconstruire_Chemin(CasesPrecedentes, arrivee)
        CasesEncoursEval.remove(case_Actuelle)
        CasesEvaluees.append(case_Actuelle)
        for voisin in Voisins_Proches(case_Actuelle):
            if voisin in CasesEvaluees:
                continue			#  ignore les cases déjà évalué

            tentative_d_score = d_score[case_Actuelle] + Distance_Voisin(case_Actuelle,voisin) # length of this path.
            if voisin not in CasesEncoursEval:	# découverte d’une nouvelle case
                CasesEncoursEval.append(voisin)
            elif tentative_d_score >= d_score[voisin]:
                continue		

            # ce chemin est le meilleur
            CasesPrecedentes[voisin] = case_Actuelle
            d_score[voisin] = tentative_d_score
            f_score[voisin] = d_score[voisin] + Distance_Heuristique(voisin, arrivee)

    return "pas de chemin"

def Reconstruire_Chemin(CasesPrecedentes,case_Actuelle):
    Chemin = [case_Actuelle]
    while case_Actuelle in CasesPrecedentes:
        case_Actuelle = CasesPrecedentes[case_Actuelle]
        Chemin.append(case_Actuelle)
    return Chemin

if __name__ == '__main__':
    liste_depart = [(2,0),(4,7),(9,31),(22,31),(29,2),(30,18),(31,27),(41,7),(40,10),(42,18),(40,20),(42,22),(35,34)]
    arrivee = (21,5)

    for depart in liste_depart:
	
        print ("-----------------Chemin------------------")

        print ( Astar(depart,arrivee)[::-1])
        
    


#-----------------Chemin------------------
#[(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (1, 9), (1, 10), (1, 11), (2, 11), (3, 11), (4, 11), (4, 12), (4, 13), (5, 13), (6, 13), (7, 13), (8, 13), (9, 13), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (11, 18), (12, 18), (12, 19), (13, 19), (14, 19), (15, 19), (16, 19), (17, 19), (18, 19), (19, 19), (20, 19), (20, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(4, 7), (4, 8), (4, 9), (5, 9), (6, 9), (6, 10), (6, 11), (7, 11), (8, 11), (9, 11), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (11, 18), (12, 18), (12, 19), (13, 19), (14, 19), (15, 19), (16, 19), (17, 19), (18, 19), (19, 19), (20, 19), (20, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(9, 31), (9, 30), (9, 29), (9, 28), (9, 27), (9, 26), (9, 25), (9, 24), (10, 24), (11, 24), (11, 23), (12, 23), (13, 23), (14, 23), (15, 23), (16, 23), (16, 22), (16, 21), (16, 20), (16, 19), (17, 19), (18, 19), (19, 19), (20, 19), (20, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(22, 31), (22, 30), (22, 29), (21, 29), (21, 28), (21, 27), (20, 27), (20, 26), (20, 25), (20, 24), (20, 23), (20, 22), (20, 21), (20, 20), (20, 19), (20, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(29, 2), (28, 2), (27, 2), (26, 2), (26, 3), (26, 4), (26, 5), (26, 6), (25, 6), (24, 6), (23, 6), (22, 6), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(30, 18), (29, 18), (28, 18), (27, 18), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(31, 27), (32, 27), (33, 27), (34, 27), (34, 26), (34, 25), (33, 25), (33, 24), (32, 24), (32, 23), (32, 22), (32, 21), (31, 21), (30, 21), (29, 21), (28, 21), (27, 21), (27, 20), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(41, 7), (42, 7), (42, 8), (42, 9), (41, 9), (40, 9), (39, 9), (38, 9), (37, 9), (36, 9), (35, 9), (34, 9), (33, 9), (32, 9), (31, 9), (30, 9), (29, 9), (29, 10), (29, 11), (29, 12), (29, 13), (29, 14), (29, 15), (29, 16), (28, 16), (28, 17), (27, 17), (27, 18), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(40, 10), (39, 10), (39, 9), (38, 9), (37, 9), (36, 9), (35, 9), (34, 9), (33, 9), (32, 9), (31, 9), (30, 9), (29, 9), (29, 10), (29, 11), (29, 12), (29, 13), (29, 14), (29, 15), (29, 16), (28, 16), (28, 17), (27, 17), (27, 18), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(42, 18), (41, 18), (40, 18), (39, 18), (38, 18), (37, 18), (37, 19), (36, 19), (35, 19), (34, 19), (33, 19), (32, 19), (32, 20), (32, 21), (31, 21), (30, 21), (29, 21), (28, 21), (27, 21), (27, 20), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(40, 20), (39, 20), (38, 20), (37, 20), (36, 20), (35, 20), (34, 20), (33, 20), (32, 20), (32, 21), (31, 21), (30, 21), (29, 21), (28, 21), (27, 21), (27, 20), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(42, 22), (42, 21), (42, 20), (41, 20), (40, 20), (39, 20), (38, 20), (37, 20), (36, 20), (35, 20), (34, 20), (33, 20), (32, 20), (32, 21), (31, 21), (30, 21), (29, 21), (28, 21), (27, 21), (27, 20), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
#-----------------Chemin------------------
#[(35, 34), (36, 34), (37, 34), (38, 34), (39, 34), (39, 33), (39, 32), (39, 31), (39, 30), (39, 29), (38, 29), (37, 29), (36, 29), (35, 29), (35, 28), (34, 28), (34, 27), (34, 26), (34, 25), (33, 25), (33, 24), (32, 24), (32, 23), (32, 22), (32, 21), (31, 21), (30, 21), (29, 21), (28, 21), (27, 21), (27, 20), (27, 19), (26, 19), (25, 19), (25, 18), (24, 18), (23, 18), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5)]
# 
